# 1. ServiceAccount example
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-service-account
  namespace: default
---
# 2. Role example for pod management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-manager
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# 3. RoleBinding example
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-manager-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: app-service-account
  namespace: default
roleRef:
  kind: Role
  name: pod-manager
  apiGroup: rbac.authorization.k8s.io
---
# 4. ClusterRole example for multiple resource types
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-admin-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets"]
  verbs: ["*"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
---
# 5. ClusterRoleBinding example
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-binding
subjects:
- kind: ServiceAccount
  name: app-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin-role
  apiGroup: rbac.authorization.k8s.io

# List of all verbs
# k api-resources -o wide
#
# Check current user and its groups:
# k auth whoami
#
# Check permissions:
# kubectl auth can-i create pods --as=system:serviceaccount:default:app-service-account
# kubectl auth can-i create roles --as=system:serviceaccount:default:app-service-account
#
# Common RBAC patterns:
#
# 1. Read-only access:
# verbs: ["get", "list", "watch"]
#
# 2. Full access:
# verbs: ["*"]
#
# 3. Specific namespace access:
# metadata.namespace: specific-namespace
#
# 4. Multiple resource types:
# resources: ["pods", "services", "configmaps"]
